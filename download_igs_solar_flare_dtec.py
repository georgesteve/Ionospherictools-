# -*- coding: utf-8 -*-
"""Solar flare S4-dTEC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16Py_EyxGkoROUWvDdS9GdqNbqkBglvI2
"""


##It is ncessary to create an .netcr file in the home directory. Containning acces for ccdis webpage

#Following the instructions for setting up a .netrc file that are explained: https://cddis.nasa.gov/Data_and_Derived_Products/CDDIS_Archive_Access.html




from lisn_utils import RNXData
from lisn_utils import S4Data
from lisn_utils import TECData

 


            


import numpy as np

import matplotlib.pyplot as plt

import matplotlib.dates as mdates
 
import numpy as np
import scipy.signal



import requests
        
def download_CCDIS_IGS_GPS(day,estacs=['sant','areq','tac'],year=2022):
    day="{0:0=3d}".format(day)
    year=str(year)
    estac_down=[]
    for i in estacs:
	try:	
		
		url = 'https://cddis.nasa.gov/archive/gnss/data/daily/'+year+'/'+day+'/'+year[2:4]+'d/'+i+day+'0.'+year[2:4]+'d.gz'
		print(url)
		#r = requests.get(url, stream=True)
		#with open(i+day+'0.22d.gz', 'wb') as f:
		#    for chunk in r.raw.stream(1024, decode_content=False):
		#	if chunk:
		#	    f.write(chunk)


		#open(i+day+'0.22d.gz', 'wb').write(r.content)
		#response = requests.post(url, stream=True,auth=('roj-idi03@igp.gob.pe', 'Kevinfajardo1'))
		r = requests.get(url, stream=True)
		if r.status_code == 200:
			estac_down=np.append(estac_down,i+day+'0.'+year[2:4]+'d.gz')
			#print(estac_down,i)
			# Opens a local file of same name as remote file for writing to
			#with open('carpeta/'+i+day+'0.'+year[2:4]+'d.gz', 'wb') as fd:
			with open(i+day+'0.'+year[2:4]+'d.gz', 'wb') as fd:
				for chunk in r.iter_content(chunk_size=1000):
					fd.write(chunk)

			# Closes local file
			fd.close()
			
			#if response.status_code == 200:
			    #with open(i+day+'0.22d.gz', 'wb') as f:
				#f.write(response.raw.read())


	except:
		print('The station '+i+' is not available')
    return estac_down
def weighted_diff_var(arr, k):
    """Compute variance of diff such that diff[n] = arr[n] - k*arr[n-1] for a fixed k"""
    diff = (arr[1:] - k * arr[:-1]) # diff[0] = arr[1] - k*arr[0], diff[1] = arr[2] - k*arr[1], etc.
    var = diff.var()
    return diff
def plot_TEC_VAR_rnx(rnx,save_path,v=51):#v=51):
    fig, axes = plt.subplots(1,sharex=True, sharey=True,figsize=(15,4))
    for i in list(rnx.prns):
        if i[0]=='G':

                x,y=rnx.get_array(i, ('epoch', 'eqTEC'), values=('ele', 30))

                y1 = np.array(y)
                y1 = y1.astype(np.float) #...of floats
                y1=np.nan_to_num(y)
                y1 = y[~np.isnan(y)]
                x1 = x[~np.isnan(x)]
		#print(x1)
                m=weighted_diff_var(y1, 1)
                
                if  len(m)>v:

                    yhat = scipy.signal.savgol_filter(m, v, 3) # window size 51, polynomial order 3
                    #P = axes.scatter(x1[1:],yhat,s=0.2)
		    P = axes.scatter(x1[1:],yhat,s=0.2)
		
		   






                    


                    locator = mdates.HourLocator(range(0, 24))
                    formatter = mdates.DateFormatter('%H')

                    axes.margins(0.05) # Keep points from touching margin of plot

                    axes.xaxis.set(major_formatter=formatter, major_locator=locator)
                    plt.grid()
                    axes.grid(True)


                    plt.ylim([-0.5,0.5])

                    axes.set_ylabel(r'dTEC [\u]')
                    #ax.set_title(estacn[j], loc='left', fontsize='medium')














    #xlabel = headers.PLOT_UNITS['epoch']
    xlabel = ' [UT]'

    axes.set_xlabel(xlabel)


            #plt.xlim([15.5,15.95])
    fig.autofmt_xdate()
    plt.title(str(rnx.station['code'])+'  '+str(rnx.date.year)+'/'+str(rnx.date.month)+'/'+str(rnx.date.day))
    
    #plt.savefig(save_path+'/'+str(rnx.station['code'])+'-'+str(rnx.date.year)+'-'+str(rnx.date.month)+'-'+str(rnx.date.day)+'.png')
    plt.show()
    
    #plt.savefig(str(rnx.station['code'])+'-'+str(rnx.date.year)+'-'+str(rnx.date.month)+'-'+str(rnx.date.day)+'.png')
    
day = input('Day you want the data (DOY)')

year = input('Year you want the data (YYYY)')


estacs=['sant','areq','glps','pove','topl','tac']    
estac_down=download_CCDIS_IGS_GPS(day,estacs,year)
print(estac_down)


for j in estac_down:
	rnx=RNXData(j)    
	rnx.calctec() 
	rnx.plot('epoch', 'eqTEC')
	plot_TEC_VAR_rnx(rnx,save_path='Documents/Solar_Flares_20-21-22/TECplot')
         
#rnx=RNXData('GPS-IGS/sant2750.22d.gz')
#rnx=RNXData('GPS-IGS/sant2750.22d.gz')  
#275           
#iqqe
#areq
#rnx.calctec()        
#rnx.plot('epoch', 'eqTEC')
#plot_TEC_VAR_rnx(rnx,save_path='Documents/Solar_Flares_20-21-22/TECplot')









































